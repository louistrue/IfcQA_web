import * as THREE from "three";
import { Fragment } from "./fragment";
import { IfcAlignmentData } from "./alignment";
import { IfcProperties, IfcMetadata, FragmentIdMap } from "./base-types";
export declare class FragmentsGroup extends THREE.Group {
    items: Fragment[];
    boundingBox: THREE.Box3;
    coordinationMatrix: THREE.Matrix4;
    keyFragments: Map<number, string>;
    data: Map<number, [number[], number[]]>;
    geometryIDs: {
        opaque: Map<number, number>;
        transparent: Map<number, number>;
    };
    ifcMetadata: IfcMetadata;
    ifcCivil?: {
        horizontalAlignments: IfcAlignmentData;
        verticalAlignments: IfcAlignmentData;
        realAlignments: IfcAlignmentData;
    };
    streamSettings: {
        baseUrl: string;
        baseFileName: string;
        ids: Map<number, number>;
        types: Map<number, number[]>;
    };
    get hasProperties(): boolean;
    protected _properties?: IfcProperties;
    getFragmentMap(expressIDs: Iterable<number>): FragmentIdMap;
    dispose(disposeResources?: boolean): void;
    setLocalProperties(properties: IfcProperties): void;
    getLocalProperties(): IfcProperties | undefined;
    getAllPropertiesIDs(): number[];
    getAllPropertiesTypes(): number[];
    getProperties(id: number): Promise<{
        [attribute: string]: any;
    } | null>;
    setProperties(id: number, value: {
        [attribute: string]: any;
    } | null): Promise<void>;
    getAllPropertiesOfType(type: number): Promise<IfcProperties | null>;
    private getPropsURL;
    private getPropertiesData;
    private constructFileName;
    private constructURL;
}
