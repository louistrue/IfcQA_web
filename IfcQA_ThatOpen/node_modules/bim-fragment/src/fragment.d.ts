import * as THREE from "three";
import { Item } from "./base-types";
import { FragmentMesh } from "./fragment-mesh";
import { FragmentsGroup } from "./fragments-group";
export declare class Fragment {
    ids: Set<number>;
    itemToInstances: Map<number, Set<number>>;
    instanceToItem: Map<number, number>;
    hiddenItems: Set<number>;
    id: string;
    mesh: FragmentMesh;
    capacity: number;
    capacityOffset: number;
    fragments: {
        [id: string]: Fragment;
    };
    group?: FragmentsGroup;
    private _settingVisibility;
    constructor(geometry: THREE.BufferGeometry, material: THREE.Material | THREE.Material[], count: number);
    dispose(disposeResources?: boolean): void;
    get(itemID: number): Item;
    getItemID(instanceID: number): number | null;
    getInstancesIDs(itemID: number): Set<number> | null;
    update(): void;
    add(items: Item[]): void;
    remove(itemsIDs: Iterable<number>): void;
    clear(): void;
    addFragment(id: string, material?: THREE.Material[]): Fragment;
    removeFragment(id: string): void;
    setVisibility(visible: boolean, itemIDs?: Iterable<number>): void;
    applyTransform(itemIDs: Iterable<number>, transform: THREE.Matrix4): void;
    exportData(): {
        ids: number[];
        id: string;
        position: Float32Array;
        normal: Float32Array;
        index: number[];
        groups: number[];
        materials: number[];
        matrices: number[];
        colors: number[];
    };
    private putLast;
}
